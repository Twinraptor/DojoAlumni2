{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\DojoAlumni\\\\client\\\\src\\\\components\\\\profile\\\\ProfileGithub.js\";\nimport React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../layout/Spinner\";\nimport { getGithubRepos } from \"../../actions/profile\";\n\nconst ProfileGithub = ({\n  username,\n  getGithubRepos,\n  repos\n}) => {\n  useEffect(() => {\n    getGithubRepos(username);\n  }, [getGithubRepos(username)]);\n  return React.createElement(\"div\", {\n    classname: \"profile-github\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"text-primary my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"Github Repos\"), repos === null ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }) : repos.map(repo => React.createElement(\"div\", {\n    key: repo._id,\n    className: \"repo bg-white p-1 my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  })));\n};\n\nProfileGithub.propTypes = {\n  getGithubRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired,\n  username: PropTypes.string.isRequired\n};\n\nconst MapStateToProps = state => ({\n  repos: state.profil.repos\n});\n\nexport default connect(mapStateToProps, {\n  getGithubRepos\n})(ProfileGithub);","map":{"version":3,"sources":["D:/react/DojoAlumni/client/src/components/profile/ProfileGithub.js"],"names":["React","useEffect","PropTypes","connect","Spinner","getGithubRepos","ProfileGithub","username","repos","map","repo","_id","propTypes","func","isRequired","array","string","MapStateToProps","state","profil","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,cAAT,QAA+B,uBAA/B;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYF,EAAAA,cAAZ;AAA4BG,EAAAA;AAA5B,CAAD,KAAyC;AAC7DP,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,cAAc,CAACE,QAAD,CAAd;AACD,GAFQ,EAEN,CAACF,cAAc,CAACE,QAAD,CAAf,CAFM,CAAT;AAGA,SACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEGC,KAAK,KAAK,IAAV,GACC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGCA,KAAK,CAACC,GAAN,CAAWC,IAAD,IACR;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACC,GAAf;AAAoB,IAAA,SAAS,EAAC,wBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALJ,CADF;AAYD,CAhBD;;AAkBAL,aAAa,CAACM,SAAd,GAA0B;AACxBP,EAAAA,cAAc,EAAEH,SAAS,CAACW,IAAV,CAAeC,UADP;AAExBN,EAAAA,KAAK,EAAEN,SAAS,CAACa,KAAV,CAAgBD,UAFC;AAGxBP,EAAAA,QAAQ,EAAEL,SAAS,CAACc,MAAV,CAAiBF;AAHH,CAA1B;;AAMA,MAAMG,eAAe,GAAIC,KAAD,KAAY;AAClCV,EAAAA,KAAK,EAAEU,KAAK,CAACC,MAAN,CAAaX;AADc,CAAZ,CAAxB;;AAIA,eAAeL,OAAO,CAACiB,eAAD,EAAkB;AAAEf,EAAAA;AAAF,CAAlB,CAAP,CAA6CC,aAA7C,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"../layout/Spinner\";\r\nimport { getGithubRepos } from \"../../actions/profile\";\r\n\r\nconst ProfileGithub = ({ username, getGithubRepos, repos }) => {\r\n  useEffect(() => {\r\n    getGithubRepos(username);\r\n  }, [getGithubRepos(username)]);\r\n  return (\r\n    <div classname='profile-github'>\r\n      <h2 className='text-primary my-1'>Github Repos</h2>\r\n      {repos === null ? (\r\n        <Spinner></Spinner>\r\n      ) : (\r\n        repos.map((repo) => (\r\n          <div key={repo._id} className='repo bg-white p-1 my-1'></div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nProfileGithub.propTypes = {\r\n  getGithubRepos: PropTypes.func.isRequired,\r\n  repos: PropTypes.array.isRequired,\r\n  username: PropTypes.string.isRequired,\r\n};\r\n\r\nconst MapStateToProps = (state) => ({\r\n  repos: state.profil.repos,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getGithubRepos })(ProfileGithub);\r\n"]},"metadata":{},"sourceType":"module"}